=> Docker is an open-source platform that allows you to automate the deployment, scaling, and management of applications using containerization.
=> Containerization is a lightweight alternative to full machine virtualization, where applications and their dependencies are packaged into containers that can run consistently
on any system.
=> Docker provides a way to package an application and its dependencies into a standardized unit called a Docker image. 
=> An image includes everything needed to run an application, such as the code, runtime, system tools, libraries, and settings. These images are created using Dockerfiles, 
which specify the steps needed to build the image.
=> Once you have a Docker image, you can create Docker containers from it. Containers are instances of Docker images that can be run on any system that has Docker installed. 
=> Containers are isolated from each other and from the underlying host system, making them portable and ensuring that applications run consistently across different environments.
=> Docker simplifies the process of managing applications by providing a consistent environment for development, testing, and deployment. 
=> It allows developers to package their applications along with all the necessary dependencies, ensuring that the application will run the same way in any environment. 
=> It also enables easy scaling and distribution of applications across multiple servers.
=> Docker has become popular in the software development and DevOps communities because it streamlines the deployment and management of applications, reduces conflicts between 
dependencies, and improves the efficiency of resource utilization. 
=> It has a vast ecosystem of tools and services that complement its functionality, making it a widely adopted solution for building and deploying applications.

Architecture of Docker

The architecture of Docker consists of several components that work together to enable containerization and manage containers efficiently.

1. Docker Engine: At the core of Docker is the Docker Engine. It is responsible for building, running, and managing containers. The Docker Engine includes two main components:

    => Docker Daemon: It runs on the host machine and manages Docker objects such as images, containers, networks, and volumes. 
                      The Docker Daemon listens for Docker API requests and performs the necessary actions to manage containers and other Docker resources.

    => Docker Client: It is the primary interface for users to interact with Docker. 
                      The Docker Client communicates with the Docker Daemon using the Docker API, sending commands and receiving responses. 
                      The Docker Client can be used from the command-line interface (CLI) or through Docker's graphical user interface (GUI) tools.
2. Docker Images: Docker images are the building blocks of containers. An image is a read-only template that includes the application code, runtime environment, libraries, and 
                  dependencies required to run an application. Images are created from Dockerfiles, which define the steps to build the image. Docker images are stored in 
                  registries, such as Docker Hub, which serve as centralized repositories for sharing and distributing images.
3. Docker Containers: Containers are instances of Docker images. A container is a lightweight, isolated runtime environment that encapsulates an application and its dependencies. 
                      Containers provide process isolation and resource management, ensuring that applications run consistently across different environments. 
                      Multiple containers can run on a single host, each with its own isolated filesystem, network, and process space.
4. Docker Registries: Registries are repositories for Docker images. They are used to store, distribute, and share Docker images across different environments and teams. 
                      Docker Hub is the default public registry provided by Docker, but you can also set up private registries to store your organization's images securely.
5. Docker Networking: Docker provides networking capabilities to enable communication between containers and the outside world. Docker containers can be connected to networks to 
                      allow inter-container communication or access to external networks. Docker supports various networking drivers, allowing flexibility in configuring networking
                      options based on the requirements of your applications.
     
6. Docker Volumes: Docker volumes provide a way to persist and share data between containers and the host machine. Volumes are directories or file systems that can be mounted into 
                    containers, allowing data to be stored outside the container's lifecycle. Volumes enable data persistence and facilitate stateful applications.     
     

Commands in Docker

1. docker run: This command is used to create and run a new container from a Docker image. It allows you to specify various options such as port mapping, volume mounting, 
             environment variables, and more.

2. docker build: This command builds a Docker image from a Dockerfile. It reads the instructions in the Dockerfile and creates a new image based on those instructions.

3. docker pull: This command fetches a Docker image from a registry, such as Docker Hub or a private registry, to your local machine.

4. docker push: This command pushes a Docker image from your local machine to a registry, making it available for others to use or deploy on different machines.

5. docker stop: This command stops a running container. It sends a termination signal to the container, allowing it to gracefully shut down.

6. docker rm: This command removes one or more containers. It is used to clean up stopped or exited containers.

7. docker rmi: This command deletes one or more Docker images from your local machine. It is used to remove images that are no longer needed.

8. docker ps: This command lists the currently running containers. It provides information such as the container ID, image used, ports exposed, and container status.

9. docker images: This command lists the Docker images available on your local machine. It shows details such as the image ID, repository, tag, and size.

10. docker exec: This command allows you to run a command inside a running container. It is useful for performing troubleshooting, debugging, or running administrative tasks 
              within a container.

11. docker logs: This command displays the logs generated by a container. It allows you to view the standard output and standard error logs, helping with troubleshooting and monitoring.

12. docker network: This command manages Docker networks. It enables you to create, connect, and disconnect containers from networks, facilitating communication between containers.

13. docker volume: This command manages Docker volumes. It allows you to create, list, and remove volumes used for persistent data storage between containers.







Image Management:

1. docker images: List all Docker images on the local machine.
2. docker build: Build a Docker image from a Dockerfile.
3. docker pull: Fetch a Docker image from a registry.
4. docker push: Push a Docker image to a registry.


Container Management:

1. docker run: Create and run a new container from an image.
2. docker start: Start a stopped container.
3. docker stop: Stop a running container.
4. docker restart: Restart a container.
5. docker pause: Pause a running container.
6. docker unpause: Unpause a paused container.
7. docker rm: Remove one or more containers.
8. docker ps: List running containers.
9. docker ps -a: List all containers (including stopped ones).

Container Operations:

1. docker exec: Run a command in a running container.
2. docker attach: Attach to a running container's terminal.
3. docker logs: Fetch the logs of a container.
4. docker cp: Copy files/folders between a container and the host machine.
5. docker kill: Send a signal to stop a running container.
6. docker rename: Rename a container.
7. docker wait: Block until a container stops and then print the exit code.

Network Management:

1. docker network create: Create a Docker network.
2. docker network ls: List Docker networks.
3. docker network inspect: Display detailed information about a Docker network.
4. docker network connect: Connect a container to a network.
5. docker network disconnect: Disconnect a container from a network.

Volume Management:

1. docker volume create: Create a Docker volume.
2. docker volume ls: List Docker volumes.
3. docker volume inspect: Display detailed information about a Docker volume.
4. docker volume rm: Remove one or more Docker volumes.

Registry and Repository Management:

1. docker login: Log in to a Docker registry.
2. docker logout: Log out from a Docker registry.
3. docker search: Search for Docker images in a registry.
4. docker tag: Tag a Docker image with a name and optional tag.
5. docker rmi: Remove one or more Docker images from the local machine.

System and Information:

1. docker info: Display system-wide Docker information.
2. docker version: Show Docker version information.
3. docker system df: Show Docker disk usage.
4. docker system prune: Remove unused Docker data (containers, networks, images, volumes).
5. docker events: Get real-time events from the Docker server.
6. docker inspect: Return low-level information about Docker objects.
